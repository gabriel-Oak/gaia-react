{"version":3,"sources":["pages/main/mainActionsTypes.ts","pages/auth/authActionsTypes.ts","enviroments/enviroments.ts","shared/utils/resolveError.ts","shared/validators/validators.ts","shared/components/renderTextField/renderTextField.tsx","pages/auth/AuthForm.tsx","shared/components/snack/snack.tsx","pages/auth/AuthPage.tsx","pages/main/mainActions.ts","pages/auth/authActions.ts","pages/main/Home/HomePage.tsx","pages/main/MainRouter.tsx","shared/utils/auth.ts","AppRouter.tsx","pages/auth/authReducer.ts","pages/main/mainReducer.ts","reducers.ts","shared/theme/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainActionsTypes","AuthActionsTypes","base","api","user","cardapio","troca","resolveError","e","response","status","message","data","required","value","undefined","RenderTextField","props","input","meta","touched","error","rest","TextField","helperText","className","reduxForm","form","handleSubmit","onSubmit","loading","CardContent","Field","name","label","variant","disabled","component","validate","CardActions","Button","color","type","CircularProgress","size","Snack","open","duration","closeSnack","icons","success","warning","info","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","id","action","key","onClick","AuthPage","setTitle","this","snackbar","Card","CardHeader","title","logIn","PureComponent","mapDispatchToProps","dispacth","document","dispatch","a","axios","post","console","log","connect","state","authReducer","HomePage","MainRouter","session","localStorage","gaiaSession","JSON","parse","expired","Date","getTime","expiresIn","token","getSession","to","path","exact","authenticate","mainReducer","AppRouter","INITIAL_STATE","auth","combineReducers","formReducer","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","App","store","createStore","reducers","applyMiddleware","thunk","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.feee23ac.chunk.js","sourcesContent":["export interface MainAction {\r\n    type: string;\r\n    value?: any;\r\n}\r\n\r\nexport const MainActionsTypes = {\r\n    AUTHENTICATED: 'AUTHENTICATED',\r\n    SETTITLE: 'SETTITLE',\r\n    FIRE_SNACK: 'FIRE_SNACK',\r\n    CLOSE_SNACK: 'CLOSE_SNACK'\r\n}","export interface AuthAction {\r\n    type: string;\r\n    value?: any;\r\n}\r\n\r\nexport const AuthActionsTypes = {\r\n    FAIL: 'FAIL',\r\n    SENDED: 'SENDED',\r\n    ENDED: 'ENDED',\r\n    SUCCESS: 'SUCCESS',\r\n    FIRE_SNACK: 'FIRE_SNACK',\r\n    CLOSE_SNACK: 'CLOSE_SNACK'\r\n}\r\n","const base = 'http://gaia-smn.herokuapp.com';\r\n\r\nexport const api = {\r\n  user: `${base}/usuario`,\r\n  cardapio: `${base}/cardapio`,\r\n  troca: `${base}/troca`\r\n}","const resolveError = (e: any) => {\r\n  const { response } = e;\r\n\r\n  if (response && response.status === 500) {\r\n    e.message = 'Tivemos algum problema interno, tente de novo mais tarde';\r\n  } else if (response && response.status === 503) {\r\n    e.message = 'Estamos fora do ar, tente de novo mais tarde';\r\n  } else if (response) {\r\n    e.message = response.data.message\r\n  }\r\n\r\n  return e;\r\n}\r\n\r\nexport default resolveError;","export const isEmail = (value: string | null) =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Esse campo deve ser do tipo e-mail' : undefined;\r\n\r\nexport const isNumber = (value: string | null) => (\r\n    !value || !isNaN(Number(value))\r\n        ? undefined\r\n        : 'Esse campo deve ser do tipo número'\r\n);\r\n\r\nexport const required = (value: string | null) => (\r\n    value || typeof value === 'number'\r\n        ? undefined\r\n        : 'Esse campo é obrigatorio'\r\n);\r\n","import React from 'react'\r\nimport { TextField } from '@material-ui/core'\r\n\r\ninterface Props {\r\n  input: any;\r\n  variant: 'outlined';\r\n  meta: {\r\n    touched: boolean;\r\n    error: string;\r\n    warning: boolean;\r\n  }\r\n}\r\n\r\nconst RenderTextField = (props: Props) => {\r\n  const {\r\n    input,\r\n    meta: { touched, error },\r\n    ...rest\r\n  } = props\r\n\r\n  return (\r\n    <TextField\r\n      {...input}\r\n      {...rest}\r\n      error={touched && !!error}\r\n      helperText={touched && error}\r\n      className=\"Field\"\r\n      // style={{marginBottom: '20px'}}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RenderTextField\r\n","import React from 'react'\r\n\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required } from '../../shared/validators/validators';\r\nimport RenderTextField from '../../shared/components/renderTextField/renderTextField';\r\n\r\nimport { Button, CardActions, CardContent, CircularProgress } from '@material-ui/core';\r\n\r\nimport './Auth.css';\r\n\r\nconst AuthForm = (props: any) => {\r\n  const { handleSubmit, onSubmit, loading } = props\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n      <CardContent className=\"field_wrapper\">\r\n        <Field\r\n          name=\"user\"\r\n          label=\"Usuário\"\r\n          variant=\"outlined\"\r\n          disabled={loading}\r\n          component={RenderTextField}\r\n          validate={[required]}\r\n        />\r\n\r\n        <Field\r\n          name=\"senha\"\r\n          label=\"Senha\"\r\n          variant=\"outlined\"\r\n          disabled={loading}\r\n          component={RenderTextField}\r\n          validate={[required]}\r\n        />\r\n      </CardContent>\r\n\r\n      <CardActions className=\"button-container\">\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          disabled={loading}\r\n        >\r\n          {\r\n            loading\r\n              ? <CircularProgress size={24} />\r\n              : 'Entrar'\r\n          }\r\n        </Button>\r\n      </CardActions>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default reduxForm({ form: 'auth' })(AuthForm);\r\n","import React from 'react';\r\nimport { Snackbar, Button } from '@material-ui/core';\r\n\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  type?: 'success' | 'error' | 'info' | 'warning';\r\n  message?: string;\r\n  duration?: number;\r\n  closeSnack: any;\r\n}\r\n\r\nconst Snack = (props: Props) => {\r\n  const {\r\n    open,\r\n    type,\r\n    message,\r\n    duration,\r\n    closeSnack\r\n  } = props\r\n\r\n  const icons = {\r\n    success: <CheckCircleIcon />,\r\n    error: <ErrorIcon />,\r\n    warning: <WarningIcon />,\r\n    info: <InfoIcon />\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      className={'snack snack_' + type}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      open={open}\r\n      autoHideDuration={duration}\r\n      ContentProps={{\r\n        'aria-describedby': 'message-id',\r\n      }}\r\n      message={\r\n        <span id=\"message-id\">\r\n          {icons[type || 'info']}\r\n          <span className=\"message_text\"> {message} </span>\r\n        </span>\r\n      }\r\n      action={[\r\n        <Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={closeSnack}>\r\n          Fechar\r\n        </Button>\r\n      ]}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snack\r\n","import React, { PureComponent, ReactNode } from 'react'\r\nimport { ReducersPool } from '../../reducers';\r\nimport { AuthState } from './authReducer';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setTitle } from '../main/mainActions';\r\nimport { logIn, closeSnack } from './authActions';\r\n\r\nimport { Card, CardHeader } from '@material-ui/core';\r\nimport AuthForm from './AuthForm';\r\nimport Snack from '../../shared/components/snack/snack';\r\n\r\ninterface Props extends AuthState {\r\n  setTitle: Function;\r\n  closeSnack: Function;\r\n  logIn: any;\r\n}\r\n\r\nclass AuthPage extends PureComponent<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.props.setTitle('Login');\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const { snackbar, closeSnack } = this.props;\r\n\r\n    return (\r\n      <main className=\"Auth\">\r\n        <article className=\"Center-container s600\">\r\n          <Card>\r\n\r\n            <CardHeader title=\"Login\" />\r\n            <AuthForm\r\n              onSubmit={this.props.logIn}\r\n              {...this.props}\r\n            />\r\n\r\n          </Card>\r\n        </article>\r\n\r\n        <Snack\r\n          closeSnack={closeSnack}\r\n          {...snackbar}\r\n        />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducersPool) => {\r\n  const { authReducer } = state;\r\n  return authReducer;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setTitle,\r\n  closeSnack,\r\n  logIn\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthPage);\r\n","import { MainActionsTypes } from \"./mainActionsTypes\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const authenticate = (token: string) => ({\r\n    type: MainActionsTypes.AUTHENTICATED,\r\n    value: token\r\n});\r\n\r\nexport const setTitle = (title: string) => (dispacth: Dispatch) => {\r\n    document.title = `Gaia | ${title}`;\r\n    dispacth({\r\n        type: MainActionsTypes.SETTITLE,\r\n        value: title\r\n    });\r\n}\r\n\r\nexport const fireSnack = (\r\n    type: string,\r\n    message: string,\r\n    duration: number = 6000\r\n) => ({\r\n    type: MainActionsTypes.FIRE_SNACK,\r\n    value: {\r\n        open: true,\r\n        type,\r\n        message,\r\n        duration\r\n    }\r\n});\r\n\r\nexport const closeSnack = () => ({\r\n    type: MainActionsTypes.CLOSE_SNACK\r\n});","import axios from 'axios';\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { AuthActionsTypes } from \"./authActionsTypes\";\r\nimport { api } from '../../enviroments/enviroments';\r\nimport resolveError from '../../shared/utils/resolveError';\r\n\r\nexport const logIn = (form: any) => async (dispatch: Dispatch) => {\r\n  try {\r\n\r\n    dispatch({ type: AuthActionsTypes.SENDED });\r\n\r\n    const { data } = await axios.post(`${api.user}/${form.user}`, form);\r\n\r\n    console.log(data);\r\n\r\n\r\n  } catch (e) {\r\n    dispatch({\r\n      type: AuthActionsTypes.FIRE_SNACK,\r\n      value: {\r\n        open: true,\r\n        type: 'error',\r\n        message: resolveError(e).message,\r\n        duration: 6000\r\n      }\r\n    })\r\n  } finally {\r\n    dispatch({ type: AuthActionsTypes.ENDED });\r\n  }\r\n}\r\n\r\nexport const closeSnack = () => ({\r\n  type: AuthActionsTypes.CLOSE_SNACK\r\n});","import React, { PureComponent, ReactNode } from 'react'\r\n\r\ninterface Props {}\r\ninterface State {}\r\n\r\nclass HomePage extends PureComponent<Props, State> {\r\n    render(): ReactNode {\r\n        return (\r\n            <div>Home Page</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage\r\n","import React, { PureComponent, ReactNode } from 'react'\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\r\nimport { authenticate, closeSnack } from './mainActions';\r\n\r\nimport HomePage from './Home/HomePage'\r\nimport { connect } from 'react-redux';\r\nimport { ReducersPool } from '../../reducers';\r\nimport { mainState } from './mainReducer';\r\nimport { getSession } from '../../shared/utils/auth';\r\n\r\nimport Snack from '../../shared/components/snack/snack';\r\n\r\ninterface Props extends mainState {\r\n  authenticate: Function;\r\n  closeSnack: Function;\r\n}\r\n\r\nclass MainRouter extends PureComponent<Props> {\r\n\r\n  render(): ReactNode {\r\n    const { snackbar, closeSnack } = this.props;\r\n    const session = getSession();\r\n\r\n    if (!session.token || session.expired) {\r\n      return <Redirect to=\"login\" />\r\n    }\r\n\r\n    return (\r\n      <div className=\"Main\">\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={HomePage} />\r\n          </Switch>\r\n        </BrowserRouter>\r\n\r\n        <Snack\r\n          closeSnack={closeSnack}\r\n          {...snackbar}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducersPool) => {\r\n  const { mainReducer } = state;\r\n  return mainReducer;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  authenticate,\r\n  closeSnack\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainRouter);","interface GaiaSession {\r\n    token: string | null;\r\n    expiresIn: number | null;\r\n    expired?: boolean;\r\n}\r\n\r\nexport const setSession = (token: string) => {\r\n    const gaiaSession: GaiaSession = {\r\n        token,\r\n        expiresIn: new Date().getTime() + 604800000\r\n    }\r\n\r\n    localStorage.setItem('gaiaSession', JSON.stringify(gaiaSession));\r\n}\r\n\r\nexport const getSession: () => GaiaSession = () => {\r\n    if (localStorage.gaiaSession) {\r\n        const gaiaSession: GaiaSession = JSON.parse(localStorage.gaiaSession);\r\n        gaiaSession.expired = new Date().getTime() < (gaiaSession.expiresIn || 0);\r\n\r\n        return gaiaSession;\r\n    }\r\n\r\n    return { token: null, expiresIn: null, expired: true };\r\n}\r\n","import React, { PureComponent, ReactNode } from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport AuthPage from './pages/auth/AuthPage';\r\nimport MainRouter from './pages/main/MainRouter';\r\n\r\ninterface Props { }\r\ninterface State { }\r\n\r\nclass AppRouter extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  render(): ReactNode {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/login\" exact component={AuthPage} />\r\n          <Route path=\"**\" component={MainRouter} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppRouter;\r\n","import { AuthAction, AuthActionsTypes } from './authActionsTypes';\r\n\r\nexport interface AuthState {\r\n    loading: boolean;\r\n    auth: boolean;\r\n    snackbar: {\r\n        open: boolean;\r\n        message?: string;\r\n        type?: 'success' | 'error' | 'info' | 'warning';\r\n        duration?: number\r\n    };\r\n}\r\n\r\nconst INITIAL_STATE: AuthState = {\r\n    loading: false,\r\n    auth: false,\r\n    snackbar: {\r\n        open: false\r\n    }\r\n}\r\n\r\nconst authReducer = (state = INITIAL_STATE, action: AuthAction) => {\r\n    switch (action.type) {\r\n        case AuthActionsTypes.SENDED:\r\n            return { ...state, loading: true }\r\n\r\n        case AuthActionsTypes.ENDED:\r\n            return { ...state, loading: false }\r\n\r\n        case AuthActionsTypes.SUCCESS:\r\n            return { ...state, auth: true }\r\n\r\n        case AuthActionsTypes.FIRE_SNACK:\r\n            return { ...state, snackbar: action.value }\r\n\r\n        case AuthActionsTypes.CLOSE_SNACK:\r\n            return { ...state, snackbar: { open: false } }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n","import { MainAction, MainActionsTypes } from \"./mainActionsTypes\"\r\n\r\nexport interface mainState {\r\n    title: string;\r\n    token?: string;\r\n    snackbar: {\r\n        open: boolean;\r\n        message?: string;\r\n        type?: 'success' | 'error' | 'info' | 'warning';\r\n        duration?: number\r\n    };\r\n}\r\n\r\nconst INITIAL_STATE: mainState = {\r\n    title: 'Gaia',\r\n    snackbar: {\r\n        open: false,\r\n    }\r\n}\r\n\r\nconst mainReducer = (state = INITIAL_STATE, action: MainAction) => {    \r\n    switch (action.type) {\r\n        case MainActionsTypes.AUTHENTICATED:\r\n            return { ...state, auth: true, token: action.value }\r\n\r\n        case MainActionsTypes.SETTITLE:\r\n            return { ...state, title: action.value }\r\n\r\n        case MainActionsTypes.FIRE_SNACK:\r\n            return { ...state, snackbar: action.value }\r\n\r\n        case MainActionsTypes.CLOSE_SNACK:\r\n            return { ...state, snackbar: { open: false } }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default mainReducer;","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport authReducer from './pages/auth/authReducer';\r\nimport mainReducer from './pages/main/mainReducer';\r\n\r\nexport interface ReducersPool {\r\n  mainReducer: object;\r\n  authReducer: object;\r\n}\r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n  authReducer,\r\n  mainReducer\r\n});","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#008c3a',\r\n      main: '#00c853',\r\n      dark: '#33d375',\r\n      contrastText: '#000',\r\n    },\r\n    secondary: {\r\n      light: '#33a361',\r\n      main: '#008c3a',\r\n      dark: '#006228',\r\n      contrastText: '#fff',\r\n    },\r\n    type: 'dark',\r\n  },\r\n});\r\n","import React from 'react';\r\nimport AppRouter from './AppRouter';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { theme } from './shared/theme/theme';\r\n\r\nimport './App.css';\r\nimport { CssBaseline } from '@material-ui/core';\r\n\r\nconst App: React.FC = () => {\r\n  const store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n  )\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline>\r\n          <AppRouter />\r\n        </CssBaseline>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}